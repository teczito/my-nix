# Do not modify this file!  It was generated by ‘nixos-generate-config’
# and may be overwritten by future invocations.  Please make changes
# to /etc/nixos/configuration.nix instead.
{
  config,
  lib,
  pkgs,
  modulesPath,
  ...
}:

{
  imports = [ (modulesPath + "/installer/scan/not-detected.nix") ];

  boot.initrd.availableKernelModules = [
    "xhci_pci"
    "thunderbolt"
    "nvme"
    "usbhid"
    "usb_storage"
    "sd_mod"
    "rtsx_pci_sdmmc"
  ];
  boot.initrd.kernelModules = [ ];
  boot.kernelModules = [ "kvm-intel" ];
  boot.extraModulePackages = [ ];

  fileSystems."/" = {
    device = "/dev/disk/by-uuid/3c2d502a-4144-4b9f-b196-38114e73ab53";
    fsType = "btrfs";
    options = [ "subvol=nixos-root" ];
  };

  fileSystems."/nix" = {
    device = "/dev/disk/by-uuid/3c2d502a-4144-4b9f-b196-38114e73ab53";
    fsType = "btrfs";
    options = [ "subvol=nixos-nix" ];
  };

  fileSystems."/home" = {
    device = "/dev/disk/by-uuid/3c2d502a-4144-4b9f-b196-38114e73ab53";
    fsType = "btrfs";
    options = [ "subvol=nixos-home" ];
  };

  fileSystems."/boot" = {
    device = "/dev/disk/by-uuid/C18C-848C";
    fsType = "vfat";
    options = [
      "fmask=0077"
      "dmask=0077"
      "defaults"
    ];
  };

  fileSystems."/mnt/backup_ssd" = {
    device = "/dev/disk/by-uuid/2acc3464-b43c-43dd-b0a1-4b7232d01348";
    fsType = "btrfs";
    options = [
      "subvolid=5"
      "nofail"
      "x-systemd.automount"
      "x-systemd.device-timeout=1ms"
      "x-systemd.idle-timeout=1min"
    ];
  };

  fileSystems."/mnt/btr_pool" = {
    device = "/dev/disk/by-uuid/3c2d502a-4144-4b9f-b196-38114e73ab53";
    fsType = "btrfs";
    options = [
      "subvolid=5"
      "noatime"
    ];
  };

  swapDevices = [ ];

  # Enables DHCP on each ethernet and wireless interface. In case of scripted networking
  # (the default) this is the recommended approach. When using systemd-networkd it's
  # still possible to use this option, but it's recommended to use it in conjunction
  # with explicit per-interface declarations with `networking.interfaces.<interface>.useDHCP`.
  networking.useDHCP = lib.mkDefault true;
  # networking.interfaces.enp0s31f6.useDHCP = lib.mkDefault true;
  # networking.interfaces.wlp0s20f3.useDHCP = lib.mkDefault true;

  powerManagement.cpuFreqGovernor = lib.mkDefault "powersave";
  hardware.cpu.intel.updateMicrocode = lib.mkDefault config.hardware.enableRedistributableFirmware;

  hardware.bluetooth.enable = true;

  hardware.graphics.enable = true;

  hardware.nvidia = {
    # Modesetting is required.
    modesetting.enable = true;

    # Nvidia power management. Experimental, and can cause sleep/suspend to fail.
    # Enable this if you have graphical corruption issues or application crashes after waking
    # up from sleep. This fixes it by saving the entire VRAM memory to /tmp/ instead
    # of just the bare essentials.
    powerManagement.enable = false;

    # Fine-grained power management. Turns off GPU when not in use.
    # Experimental and only works on modern Nvidia GPUs (Turing or newer).
    powerManagement.finegrained = false;

    # Use the NVidia open source kernel module (not to be confused with the
    # independent third-party "nouveau" open source driver).
    # Support is limited to the Turing and later architectures. Full list of
    # supported GPUs is at:
    # https://github.com/NVIDIA/open-gpu-kernel-modules#compatible-gpus
    # Only available from driver 515.43.04+
    open = true;

    # Enable the Nvidia settings menu,
    # accessible via `nvidia-settings`.
    nvidiaSettings = true;

    # Optionally, you may need to select the appropriate driver version for your specific GPU.
    package = config.boot.kernelPackages.nvidiaPackages.stable;

    prime = {
      intelBusId = "PCI:0:0:2:0";
      nvidiaBusId = "PCI:0:1:0:0";

      offload = {
        enable = true;
        enableOffloadCmd = true;
      };
    };
  };
}
